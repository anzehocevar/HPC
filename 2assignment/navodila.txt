RGB -> YCBCR (YUV) zaradi svetilnosti

potem histogram slike (koliko pixlov
ima kaksno vrednost (0 - 255))

samo za komponento Y:
H = [15, 33, ,...] 256 elementov s stevilom pixlov

H = [0, 1, 5, 2, 3]

# vsota elementov do indexa i
H cdf = [0, 1, 6, 8, 11]

sledi histogram equalization:

npr:
1 0 2 2
0 3 1 1 
0 2 0 1
0 1 3 1

H = [5, 6, 3, 2, 0 ..., 0]
H cdf = [5, 11, 14, 16, ..., 16]
min H cdf = prva nenicelna vrednost iz leve proti desni


Lnew0 = (5 - 5 / 16 - 5)* (256 - 1) = 0
Lnew1 = (11 - 5 / 16 - 5)* (256 - 1) = 139.01 = 139
Lnew2 = (14 - 5 / 16 - 5)* (256 - 1) = x1
Lnew3 = (16 - 5 / 16 - 5)* (256 - 1) = x2

0 -> 0
1 -> 139
2 -> ...

vstavimo v sliko:

139 0 x1 x2
0 x2 139 139
....
....

in preslikamo v RGB

Paralelizacija:
vsak pixel posebej
vec stvari naredimo znotraj iste funkcije
da je manj zagonov kernela (ščepcev)

problem pri prepiskovanjem vrednosti v tabelo H:
ali zaklepamo
ali pa naredimo privatne histograme
-> atomicno pristejemo delne vsote

zelimo cim vec niti (delamo v Cuda,...)
delo delimo cim bolj na drobno:

ena nit = 1 pixel
-> ne moremo narediti N histogram

uporabimo bloke niti:
multiprocesor ima 8 blokov
blok ima 1024 niti
niti si delijo skupni pomnilnik (lokalni)

obicajno 1 blok na multiprocesor

vsak blok ima svoj lokalni histogram
in na koncu seštejemo vse lokalne histograme

shared memory (delijo si ga niti v bloku)
-> hitrejši dostop kot globalni pomnilnik


vseeno uporabimo atomicAdd za niti znotraj multiprocesorja
-> ker se deli shared memory

racunanje H cdf paralelno: (redukcija)

k   0   1   2   3   4   5   6   7   8   9   10  11
----------------------------------------------------
0       01      23      45      67      89      1011 (te indexe skupaj)

1               0123           4567             891011

2                       01234567                

3                                          01234567891011


2             0-3 + 4-5 = 0-5     6-7 + 8-9 = 0-9

1      1+2         0+4       5+6         7+8         9+10

2^k -> shifti

scan algorithm







